<persistence xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
	version="2.0">
	<!-- unidade de persistencia com o nome financas -->
	<persistence-unit name="financias">
		<!-- Implementação do JPA, no nosso caso Hibernate -->
		<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
		<!-- Aqui são listadas todas as entidades -->
		<class>br.com.fiap.financias.bean.Conta</class>
		<properties>
			<!-- Propriedades JDBC -->
			<property name="javax.persistence.jdbc.driver" value="oracle.jdbc.OracleDriver" />
			<property name="javax.persistence.jdbc.url" value="jdbc:oracle:thin:/:@oracle.fiap.com.br:1521:ORCL" />
			<property name="javax.persistence.jdbc.user" value="rm76583" />
			<property name="javax.persistence.jdbc.password" value="270298" />
			<!-- Configurações específicas do Hibernate -->
			<property name="hibernate.dialect" value="org.hibernate.dialect.OracleDialect" />
			
			<property name="hibernate.hbm2ddl.auto" value="update" />
			
			<!-- 
			
			Quando colocamos o valor dessa propriedade como update significa que qualquer alteração 
			incremental nas nossas classes de modelo (ou a criação de novas classes) 
			também ocorrerão nas tabelas quando utilizarmos novamente a JPA. 
			Isso significa que ao criarmos uma nova classe ou inserirmos 
			um novo campo em alguma entidade, o provider usado irá fazer 
			as alterações no banco de dados. 
			É importante que, ao utilizarmos essa estratégia, 
			façamos varreduras periódicas no 
			banco para eliminar campos e tabelas não mais usadas
				
			 -->
			
			
			<property name="hibernate.show_sql" value="true" />
			
			<!--  Mostra as ações a serem feitas no banco -->	
			
		
			<property name="hibernate.format_sql" value="true" />
			
		</properties>
	</persistence-unit>
</persistence>