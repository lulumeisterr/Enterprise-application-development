O'que é JPA ? 

É UMA DOCUMETACAO DE ESPECIFICACAO

É A API DO JAVA QUE DITA COMO OS FRAMEWORKS ORM DEVE SER IMPLEMENTADOS EM BANCOS RELACIONAIS
TENDO O JDBC COMO BASE , FACILITANDO O DESENVOLVIMENTO A PERSISTENCIA

um framework , baseando em java bean que se retrata um framework de mapeamento de objeto relacional 
em banco de dados , tendo como base a jdbc , ou seja ela se molda a jdbc facilitando o nosso desenvolvimento

1 - Representam as unidades de persistência;
2 - Permitem o acesso aos dados por meio de métodos get e set;
3 - Possuem, obrigatoriamente, um identificador único;
4 - Tais classes são mapeadas para o banco de dados por meio de anotações;
5 - São como espelhos do banco de dados, isto é, uma instância é criada ou alterada primeiramente em memória e posteriormente atualizada no banco de dados;
6 -  São gerenciadas por um mecanismo de persistência denominado Entity Manager;

--------------------------------------------------------------------------------------------------------------------------------

ORM  -  ORM é uma framework que trabalha com banco de dados , forma de criar uma camada entre dados relacional e objetos. 
               De um lado, você tem as tabelas e seus relacionamentos, do outro, os objetos de uma linguagem OO.

               - Ele faz o mapeamento da sua classe para o banco de dados e cada ORM tem suas particularidades para gerar o SQL 
	referente a inserção do objeto que corresponde a uma tabela no banco de dados e realizar a operação. 

Utilizando um ORM, também se ganha produtividade, pois deixa-se de escrever os comando SQL para deixar que o próprio ORM, faça isto por você.

-------------------------------------------------------------------------------------------------------------------------------

HIBERNATE 

É UM FRAMEWORK CRIADO PARA FACILITAR A PERSISTENCIA DE DADOS EM JAVA ,
TRAS COMO DIFERENCIAL A ORM Q ABSTRAI DO PROGRAMADOR MUITAS TAREFAS REPETITIVAS

https://www.devmedia.com.br/curso/curso-jpql/2108

XML
arquivo de texto com tags html
framework - conjunto de biblioteca 
-------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------
Anotações em java

São textos inseridos diretamente no código fonte que expressam
informações complementares sobre o uma classe, seus métodos,
propriedades que Permitem especificar metadados dentro do código mas
Não é possível alterar as anotações caso não se tenha o código fonte;

- Objetos são instanciados a partir de classes anotadas;
- § Processador reconhece as anotações encapsuladas nos objeto;
- § Os resultados são produzidos a partir das informações contidas nas anotações

você pode por em :

- atributos
- metodos(Métodos definem os parâmetros aceitos pela anotação);
- classes

- Parâmetros possuem tipos de dados restritos (String, Class, Enumeration, Annotation e Arrays desses tipos);
- Parâmetros podem ter valores default;

@Retention indica onde e por quanto tempo anotações com este tipo serãomantidas:
@Target , avisar para qual essa anotacao serve

-----------------------------------------------------------------------------------------------------------------------------------

API REFLECTION - ELA PEGA TODAS AS INFORMAÇÕES DE COMO ELA FOI CRIADA ATRAS DELA

APIs são responsáveis, entre outras coisas, pela transformação dos objeto
em declarações SQL

----------------------------------------------------------------------------------------------------------------------------------
					Frame

-  A anotação @Entity -  especifica que uma classe é uma entidade;
- alterar o nome da tabela assoociada a entidade através do atributo @Table(name=“TAB_CLIENTE”)
- @ID - Deve-se sempre definir o atributo que representará a chave primária
- @GENERATEDVALUE - Especifica a estratégia de geração de valores automáticos para propriedades;
- @TRANSIENT - Indica que determinado atributo não deve ser persistido;
- @TEMPORALType - Especifica o tipo de dado a ser armazenado em propriedades do tipo Date e Calendar;
- @LOB - Permite mapear objetos de grande dimensão para a base de dados. Exemplo: imagens, documentos de texto, planilhas, etc...
- @ENUM - Atributo de dominio

- name: nome a ser referenciado pelo @GeneratedValue;
– sequenceName: nome da sequence de banco de dados;
– allocationSize : incremento

	–  Generator: nome do gerador de chaves;
	–  Strategy: indica o tipo de estratégia utilizada;

	    Tipos mais comuns de estratégias de geração:

	– GeneratorType.SEQUENCE: baseado em sequence;
	– GeneratorType.IDENTITY: campos identidade;

As anotações podem ser feitas tanto nas propriedades da classe quanto nos métodos get;



---------------------------------------------------------------------------------------------------------------------------------
ENTITY MANAGER - Unidade central para gerenciamento de entidades na JPA Responsável pela criação, atualização, remoção e consulta às entidades;

Para se obter um EntityManger você deve primeiro ter uma fabrica que se referencia por EntityManagerFactory 
onde será chamada a persiste.xml cujo o parâmetro a ser recuperado da persistence unit, deve ser passado para ter os devido acesso ao Banco de dados.

Ex : EntityManagerFactory f = Persistence.createEntityManagerFactory("cliente");

Depois é só obter o Entity Manager a partir do EntityManagerFactory:
EntityManager em = f.createEntityManager();


- Cada Entity Manager mantém apenas um único Persistence Context

Existem duas formas de obter-se um Entity Manager:

1. A própria aplicação obtém um Entity Manager e o fecha utilizando métodos da
API apropriados - Application Managed Entity Manager;

2. Um container instancia e gerencia o Entity Manager -Container Managed
Entity Manager;



-----------------------------------------------------------------------------------------------------------------------------------
			XML

- Uma Persistence Unit define todas as configurações necessárias para que um Entity Manager consiga efetuar a persistência de um conjunto de entidades; 
Por exemplo, na Persistence Unit é onde definimos as Configurações de banco de dados que iremos acessar, a URL de conexão, etc.

Persistence Unit -  é onde definimos as Configurações de banco de dados que iremos acessar, a URL de conexão, 
Persistence Unit -  Cada persistence Unit é identificada por um nome dentro do arquivo persistence.xml na pasta META-INF;

----------------------------------------------------------------------------------------------------------------------------------

Entidades Gerenciadas:

1 - Quando entidades estão associadas a um contexto de persistência;
2 - Alterações no estado das entidades são sincronizadas com o banco de dados;

Entidades Não Gerenciadas:

1 - Entidades não associadas a um contexto de persistência (por exemplo quando são instanciadas ou quanto o Entity Manager é fechado);
2 - Alterações nas entidades não se refletem no banco de dados;

----------------------------------------------------------------------------------------------------------------------------------
			TRANSAÇÕES

As transações definem quanto as entidades devem ser sincronizadas com a
base de dados;

-Resource Local: transação nativa JDBC (mais simples, de responsabilidade da aplicação);

-Java Transaction API (JTA): mecanismo padrão do Java EE (mais elaborado, o container
Java EE gerencia, é transparente para a aplicação);

Para obter-se uma transação do Entity Manager utilizar o método
getTransaction()

begin(): delimita o início de uma transação (é obrigatório, um por vez)
• commit(): confirma a transação (sincroniza o contexto de persistência com a base de
dados)
• rollback(): desfaz a transação
• isActive(): verifica se a transação encontra-se em andamento, isto é, não
ocorreu commit ou rollback ainda;
