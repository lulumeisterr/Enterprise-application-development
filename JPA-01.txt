O'que é JPA ? 

É UMA DOCUMETACAO DE ESPECIFICACAO

É A API DO JAVA QUE DITA COMO OS FRAMEWORKS ORM DEVE SER IMPLEMENTADOS EM BANCOS RELACIONAIS
TENDO O JDBC COMO BASE , FACILITANDO O DESENVOLVIMENTO A PERSISTENCIA

um framework , baseando em java bean que se retrata um framework de mapeamento de objeto relacional 
em banco de dados , tendo como base a jdbc , ou seja ela se molda a jdbc facilitando o nosso desenvolvimento

--------------------------------------------------------------------------------------------------------------------------------

XML
 arquivo de texto com tags html
-------------------------------------------------------------------------------------------------------------------------------
framework - conjunto de biblioteca 
------------------------------------------------------------------------------------------------------------------------------
HIBERNATE 

É UM FRAMEWORK CRIADO PARA FACILITAR A PERSISTENCIA DE DADOS EM JAVA ,
TRAS COMO DIFERENCIAL A ORM Q ABSTRAI DO PROGRAMADOR MUITAS TAREFAS REPETITIVAS

https://www.devmedia.com.br/curso/curso-jpql/2108
--------------------------------------------------------------------------------------------------------------------------------

ORM  -  ORM é uma framework que trabalha com banco de dados , forma de criar uma camada entre dados relacional e objetos. 
               De um lado, você tem as tabelas e seus relacionamentos, do outro, os objetos de uma linguagem OO.

               - Ele faz o mapeamento da sua classe para o banco de dados e cada ORM tem suas particularidades para gerar o SQL 
	referente a inserção do objeto que corresponde a uma tabela no banco de dados e realizar a operação. 

Utilizando um ORM, também se ganha produtividade, pois deixa-se de escrever os comando SQL para deixar que o próprio ORM, faça isto por você.

---------------------------------------------------------------------------------------------------------------------------------
Anotações em java

você pode por em :

- atributos
- metodos
- classes

São textos inseridos diretamente no código fonte que expressam
informações complementares sobre o uma classe, seus métodos,
propriedades, etc

- Objetos são instanciados a partir de classes anotadas;
- § Processador reconhece as anotações encapsuladas nos objeto;
- § Os resultados são produzidos a partir das informações contidas nas anotações


@Target , avisar para qual essa anotacao serve

-----------------------------------------------------------------------------------------------------------------------------------
API REFLECTION - ELA PEGA TODAS AS INFORMAÇÕES DE COMO ELA FOI CRIADA ATRAS DELA


----------------------------------------------------------------------------------------------------------------------------------
					Frame

-  A anotação @Entity especifica que uma classe é uma entidade;
- alterar o nome da tabela assoociada a entidade através do atributo @Table(name=“TAB_CLIENTE”)
- @ID Deve-se sempre definir o atributo que representará a chave primária
- @GENERATEDVALUE Especifica a estratégia de geração de valores automáticos para propriedades;

	–  Generator: nome do gerador de chaves;
	–  Strategy: indica o tipo de estratégia utilizada;

	    Tipos mais comuns de estratégias de geração:

	– GeneratorType.SEQUENCE: baseado em sequence;
	– GeneratorType.IDENTITY: campos identidade;

As anotações podem ser feitas tanto nas propriedades da classe quanto nos métodos get;

---------------------------------------------------------------------------------------------------------------------------------
ENTITY MANAGER - Unidade central para gerenciamento de entidades na JPA 
		  Responsável pela criação, atualização, remoção e consulta às entidades;

Persistence Unit -  é onde definimos as Configurações de
banco de dados que iremos acessar, a URL de conexão, etc
---------------------------------------------------------------------------------------------------------------------------------
			XML

- Uma Persistence Unit define todas as configurações necessárias para que um Entity
Manager consiga efetuar a persistência de um conjunto de entidades;  Por exemplo, na Persistence Unit é onde definimos as Configurações de banco de
dados que iremos acessar, a URL de conexão, etc.

Cada Persistence Unit é identificada por um nome dentro do arquivo
persistence.xml na pasta META-INF;

----------------------------------------------------------------------------------------------------------------------------------
			TRANSAÇÕES

Para obter-se uma transação do Entity Manager utilizar o método
getTransaction()

begin(): delimita o início de uma transação (é obrigatório, um por vez)
• commit(): confirma a transação (sincroniza o contexto de persistência com a base de
dados)
• rollback(): desfaz a transação
• isActive(): verifica se a transação encontra-se em andamento, isto é, não
ocorreu commit ou rollback ainda;